<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cucumber | Блог Снайпера</title><link>https://snayp.github.io/%D1%82%D0%B5%D0%BC%D0%B0/cucumber/</link><atom:link href="https://snayp.github.io/%D1%82%D0%B5%D0%BC%D0%B0/cucumber/index.xml" rel="self" type="application/rss+xml"/><description>cucumber</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><lastBuildDate>Mon, 30 Nov 2020 05:10:51 +0300</lastBuildDate><image><url>https://snayp.github.io/img/mstile-150x150_hu925f1eb09004ef6fa1eb3a268807fdd0_7989_512x512_fill_lanczos_center_3.png</url><title>cucumber</title><link>https://snayp.github.io/%D1%82%D0%B5%D0%BC%D0%B0/cucumber/</link></image><item><title>Знакомство Cucumber и BDD и TDD подхода. Начало.</title><link>https://snayp.github.io/%D0%B1%D0%BB%D0%BE%D0%B3/%D0%BE%D0%BF%D1%8B%D1%82-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-cucumber-%D0%B8-bdd-%D0%BF%D0%BE%D0%B4%D1%85%D0%BE%D0%B4%D0%B0-%D0%BF%D1%80%D0%B8-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B5-%D1%87%D0%B0%D1%81%D1%82%D1%8C-1/</link><pubDate>Mon, 30 Nov 2020 05:10:51 +0300</pubDate><guid>https://snayp.github.io/%D0%B1%D0%BB%D0%BE%D0%B3/%D0%BE%D0%BF%D1%8B%D1%82-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-cucumber-%D0%B8-bdd-%D0%BF%D0%BE%D0%B4%D1%85%D0%BE%D0%B4%D0%B0-%D0%BF%D1%80%D0%B8-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B5-%D1%87%D0%B0%D1%81%D1%82%D1%8C-1/</guid><description>
&lt;h2 id="знакомство-с-bdd">&lt;a class="anchor" href="#знакомство-с-bdd" title=' "Знакомство с BDD".'>&lt;svg aria-hidden="true">&lt;use xlink:href="#hashtag"/>&lt;/svg>&lt;/a> Знакомство с BDD&lt;/h2>
&lt;figure class="small" id="figure-bdd---мнения-за-и-против-best-practicies-и-anti-patterns">
&lt;a data-fancybox="" href="../../%D0%B1%D0%BB%D0%BE%D0%B3/%D0%BE%D0%BF%D1%8B%D1%82-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-cucumber-%D0%B8-bdd-%D0%BF%D0%BE%D0%B4%D1%85%D0%BE%D0%B4%D0%B0-%D0%BF%D1%80%D0%B8-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B5-%D1%87%D0%B0%D1%81%D1%82%D1%8C-1/header_hu7907faaef7e9e2a11d2683d026425d0b_271474_2000x2000_fit_lanczos_3.png" data-caption="BDD - мнения за и против, best practicies и anti patterns.">
&lt;img data-src="../../%D0%B1%D0%BB%D0%BE%D0%B3/%D0%BE%D0%BF%D1%8B%D1%82-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-cucumber-%D0%B8-bdd-%D0%BF%D0%BE%D0%B4%D1%85%D0%BE%D0%B4%D0%B0-%D0%BF%D1%80%D0%B8-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B5-%D1%87%D0%B0%D1%81%D1%82%D1%8C-1/header_hu7907faaef7e9e2a11d2683d026425d0b_271474_2000x2000_fit_lanczos_3.png" class="lazyload" alt="Behaviour Driven Development (BDD) - командное обсуждение существенных детелей проекта, позволяющее добиться однозначного понимания будущих изменений у всех членов команды." width="2405" height="1173">
&lt;/a>
&lt;figcaption>
BDD - мнения за и против, best practicies и anti patterns.
&lt;/figcaption>
&lt;/figure>
&lt;p>О фреймворке
&lt;a href="https://cucumber.io/" target="_blank" rel="noopener">Cucumber&lt;/a>, я узнал, примерно 7 лет назад. Увлечение фреймворком Ruby on Rails первое упоминание гибких методов разработки, сформулированные группой и сразу оценил возможность в 10 строчек написать e2e тест, основанного спеке. Написанной разговорным зяком, до написания и описывающее реальное использование возможностей системы, по всем канонам BDD/TDD подходов. Тест сразу мог запускался в headless версии браузера и только для отладки переключаться на полноценную версию. RoR подразумевает написание большого количества тестов из всех ступеней пирамиды тестирования и развила очень мощный инструментарий для тестов и проверок, которые могут понадобиться 90% создаваемых приложений. Сами принципы, которым рекомендуют следовать абрревиатуры BDD &amp;amp; TDD при организации процесса разработки и которым нужно придерживаются всем членам команды, смогли выразить весь накопленный опыт в программировании полученный при создании сложнейшего ПО, решающего задачи не доступные раньше для человека, изменили отношение к классическим источника дохода и перераспредение ресурсов в пользу цифровых я узнал благодаря передовому взгляду и инновацционному отношениею к процессам в командах, заинтересованных получить инструмент для оптимизации и упрощения издержен бизнеса и увеличить прибыль компании. Затраты на внедрение этих правил и рекомендаций, в несколько раз окупятся в долгосрочном проекте, в первый год развития. Неизменно следовать основым идеям, позволит получить максимальную уверенность в качестве и правильной работоспосоюности всего реализованного функционала, который описан и задокументирован разговорным языком в объеме достаточном для понимая всей доступной логики.&lt;/p>
&lt;p>При первом знакомстве с гибкими подходами в разработке, приносящими множество улучшений в команде, которые позволят иметь единое представление у всех участников, о функциях и параметрах которые появятся, в будующем, через значительный промежок времени. Но и без этого же мы создавали надежное ПО для гигантских вычислений? Перспективы техник не были , в 2016 года в отечественной разработке массого использования не оценить по достуинству возможности предлагаемыми BDD &amp;amp; TDD методологиями и начать их применять на практике. Сразу стоит оговориться, что до сих пор споры на тему применимости данных подходов и реального профита для команды, не утихли и продожаются среди сторонников и противников в среде тестировщиков-автоматизаторов.&lt;/p>
&lt;p>В следующий раз я столкнулся с синтаксисом Given, When, Then уже при написании тестов на REST API используя Java и библиотеку
&lt;a href="http://rest-assured.io/" target="_blank" rel="noopener">Rest-Assured&lt;/a>. Тесты выглядели примерно так и кроме синтаксиса от BDD не заимствовали ничего лишнего.&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/snayp/c41875f9b2aa729ee29b32e13cc5205c.js">&lt;/script>
&lt;p>
&lt;a href="https://automated-testing.info/t/code-recipe-primer-ispolzovaniya-rest-assured-dlya-avtomatizaczii-restfull-api/24599?u=snayp" target="_blank" rel="noopener">Выложил больше примеров с описанием, что делают тесты&lt;/a>&lt;/p>
&lt;p>Затем, при автоматизации Websocket API пришлось использовать JavaScript инструменты -
&lt;a href="https://jasmine.github.io/" target="_blank" rel="noopener">Jasmine&lt;/a> +
&lt;a href="https://karma-runner.github.io/latest/index.html" target="_blank" rel="noopener">Karma&lt;/a>. Jasmine - BDD фреймворк, который &amp;ldquo;из коробки&amp;rdquo; имеет все необходимое для тестировани JavaScript кода. Не зависит ни каких сторонних npm модулей, потому очень шустрый. В моем случае, он был очень удобен по двум причинам:&lt;/p>
&lt;ul>
&lt;li>для тестирования ассинхронного WebSocket API JavaScript оказался гораздо приспособленней, чем Java;&lt;/li>
&lt;li>парсить JSON объекты JavaScript&amp;rsquo;ом, намного легче, чем возиться с Java объектами;&lt;/li>
&lt;/ul>
&lt;p>Возможности BDD, снова никакой роли не играли. Тут хочу мельком сказать про свое первое знакомство с магией Promise, Поскольку тесты подразумевали несколько последовательных вызовов API, где каждый последующий вызов использовал результаты предыдущего, то очень быстро код стал абсолютно не читаемым из-за огромного числа вложенных callback&amp;rsquo;ов.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-javascript" data-lang="javascript">wsApi.sendMessage(&lt;span style="color:#f1fa8c">&amp;#34;service&amp;#34;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;linktourist&amp;#34;&lt;/span>, linkQuery, &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> (data) {
wsApi.sendMessage(&lt;span style="color:#f1fa8c">&amp;#34;service&amp;#34;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;unlinktourist&amp;#34;&lt;/span>, linkQuery, &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> (data) {
wsApi.sendMessage(&lt;span style="color:#f1fa8c">&amp;#34;person&amp;#34;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;delete&amp;#34;&lt;/span>, {id&lt;span style="color:#ff79c6">:&lt;/span> personId}, &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> (data) {
wsApi.sendMessage(&lt;span style="color:#f1fa8c">&amp;#34;service&amp;#34;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;delete&amp;#34;&lt;/span>, {service&lt;span style="color:#ff79c6">:&lt;/span> serviceId}, &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> (data) {
wsApi.sendMessage(&lt;span style="color:#f1fa8c">&amp;#34;order&amp;#34;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;delete&amp;#34;&lt;/span>, {id&lt;span style="color:#ff79c6">:&lt;/span> orderId}, &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> (data) {
done();
});
});
});
});
});&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Хоть IntelliJIDEA и мощнейший редактор текста, но искать, где же пропущена одна скобка или точка с зяпятой, было просто не выносимо. Тогда я первый раз узнал про Linter&amp;rsquo;ы, это тоже отдельная тема, которой будет посвящен пост в будущем. Сокральный смысл Promise я тогда не понял, а вот возможность отрефакторить код, чтобы он был выровнен по левому краю, оценил сразу!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-javascript" data-lang="javascript">it(&lt;span style="color:#f1fa8c">&amp;#34;dry cleaning&amp;#34;&lt;/span>, &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span>(done) {
&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> inDate &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">Date&lt;/span>().getTime() &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">60&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">60&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">24&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">40&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">1000&lt;/span>;
&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> outDate &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">Date&lt;/span>().getTime() &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">60&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">60&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">24&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">40&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">1000&lt;/span>;
&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> searchQuery &lt;span style="color:#ff79c6">=&lt;/span> {
place&lt;span style="color:#ff79c6">:&lt;/span> {
&lt;span style="color:#ff79c6">in&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;HO000288TR&amp;#34;&lt;/span>
},
date&lt;span style="color:#ff79c6">:&lt;/span> {
&lt;span style="color:#ff79c6">in&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span> inDate,
out&lt;span style="color:#ff79c6">:&lt;/span> outDate,
intime&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#bd93f9">43200000&lt;/span>, &lt;span style="color:#6272a4">// 12:00
&lt;/span>&lt;span style="color:#6272a4">&lt;/span> outtime&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#bd93f9">50400000&lt;/span> &lt;span style="color:#6272a4">// 14:00
&lt;/span>&lt;span style="color:#6272a4">&lt;/span> },
families&lt;span style="color:#ff79c6">:&lt;/span> [
{
adults&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#bd93f9">2&lt;/span>
}
]
};
{
expect(data).not.toBeNull();
expect(data.extras).not.toBeNull();
expect(data.extras.length).toBeGreaterThan(&lt;span style="color:#bd93f9">0&lt;/span>);
expect(data.extras.length).toBe(&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> extra &lt;span style="color:#ff79c6">=&lt;/span> data.extras[&lt;span style="color:#bd93f9">0&lt;/span>];
expect(extra.type).not.toBeNull();
expect(extra.type).toBe(&lt;span style="color:#f1fa8c">&amp;#34;DRY&amp;#34;&lt;/span>);
expect(extra.index).not.toBeNull();
expect(extra.index).toBe(&lt;span style="color:#bd93f9">0&lt;/span>);
expect(extra.commerce.offer).toBe(context.extraOffer);
expect(extra.commerce.original).not.toBeNull();
expect(extra.commerce.payment).not.toBeNull();
expect(extra.commerce.currency).not.toBeNull();
expect(extra.commerce.currency).toBe(&lt;span style="color:#bd93f9">978&lt;/span>);
done();
});
};
paginationQuery(searchQuery);
}, &lt;span style="color:#bd93f9">20000&lt;/span>);
});&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Итого, за первые 5 лет моего знакомства с термином Behaviour Driven Development (BDD), так и не возникло насущной необходимости, благодаря который я бы смог подробнее разобраться, зачем же еще что то новое придумали и смог бы применить новый подход в своей работе.&lt;/p>
&lt;p>В следующей части будет рассказ, о том, как же я все таки осознал, как и зачем можно использовать BDD и даже нашел задачу, где предложенные методы, могли реально упростить разработку, а точнее, что описание конкретного кейса на естественном языке, действительно помогает понять смысл разрабатываемого функционала всем членам команды и не тратить ресуры на реализацию сомнительнего функционала.&lt;/p></description></item></channel></rss>